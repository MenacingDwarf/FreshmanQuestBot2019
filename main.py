from pymongo import MongoClient
import telebot
import json
import time

MAX_GROUP_STUDENTS = 1
db = MongoClient()['am-cp']

with open('keys.json', 'r') as file:
    token = json.loads(file.read())['bot_token']

bot = telebot.TeleBot(token)


def keyboard(key):
    x = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    for j in key:
        x.add(*[telebot.types.KeyboardButton(i) for i in j])
    return x


def send_message_group(group_number, text):
    group = db['groups'].find_one({'id': group_number})
    users = db['users'].find({'group': group['id']})
    for u in users:
        bot.send_message(u['id'], text)

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@bot.message_handler(commands=['start', 'help'])
def handle_start(message):
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç–∏–∫–∏!')


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
@bot.message_handler(commands=['reg_user'])
def handler_user(message):
    try:
        group = int(message.text.split()[1])
    except:
        bot.send_message(message.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!')
    else:
        x = db['groups'].find_one({'id': group})

        if not x:
            bot.send_message(message.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã!')
        else:
            if len(list(db['users'].find({'group': group}))) >= MAX_GROUP_STUDENTS:
                bot.send_message(message.chat.id, '–í –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É —É–∂–µ –Ω–µ–ª—å–∑—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!')
            else:
                user = db['users'].find_one({'id': message.chat.id})
                if not user:
                    user = {'id': message.chat.id, 'type': 0, 'group': group}
                    db['users'].insert_one(user)

                    keyboards = keyboard([['/info'], ['/free']])
                    bot.send_message(message.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥—Ä—É–ø–ø—ã ' + str(group) + ' –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!',
                                     reply_markup=keyboards)
                else:
                    bot.send_message(message.chat.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!')


# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –≥—Ä—É–ø–ø—ã
@bot.message_handler(commands=['info'])
def handler_info(message):
    user = db['users'].find_one({'id': message.chat.id})
    if not user:
        bot.send_message(message.chat.id, '–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!')
    else:
        group_number = user['group']
        group = db['groups'].find_one({'id': group_number})
        current_station = db['stations'].find_one({'id': group['current_station']})['name'] if group['current_station'] != 0 \
            else '–Ω–µ—Ç —Ç–µ–∫—É—â–µ–π —Å—Ç–∞–Ω—Ü–∏–∏'
        bot.send_message(message.chat.id, '–ì—Ä—É–ø–ø–∞ –Ω–æ–º–µ—Ä ' + str(group_number) +
                         '\n–¢–µ–∫—É—â–∞—è —Å—Ç–∞–Ω—Ü–∏—è: ' + current_station +
                         '\n–î–µ–Ω—å–≥–∏: ' + str(group['money']) +
                         '\n–û–ø—ã—Ç: ' + str(group['experience']) +
                         '\n–ú—É–ª—å—Ç–∏–ø–ª–∏–∫–∞—Ç–æ—Ä –æ–ø—ã—Ç–∞: ' + str(1 + group['money'] / 100))


# –°–≤–æ–±–æ–¥–Ω—ã–µ —Å—Ç–∞–Ω—Ü–∏–∏
@bot.message_handler(commands=['free'])
def handler_free(message):
    is_started = db['settings'].find_one({'name': 'quest'})['is_started']
    is_ended = db['settings'].find_one({'name': 'quest'})['is_ended']
    if not is_started:
        text = '–ö–≤–µ—Å—Ç –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª—Å—è, –ø–æ—Ç–µ—Ä–ø–∏ –µ—â—ë –Ω–µ–º–Ω–æ–∂–∫–æ üòâ' if not is_ended else '–ö–≤–µ—Å—Ç —É–∂–µ –∑–∞–∫–æ–Ω—á–µ–Ω, –º–æ–∂–µ—à—å –æ—Ç–¥–æ—Ö–Ω—É—Ç—å üòâ'
        bot.send_message(message.chat.id, text)
    else:
        stations = list(db['stations'].find({'group': 0}))
        answer = "\n\n".join([str(station["id"]) + '. ' + station["name"] +
                              '\n–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ' + station["geo"] +
                              '\n–ù–∞–≥—Ä–∞–¥–∞: ' + str(station["reward"]) for station in stations])
        bot.send_message(message.chat.id, '–°–ø–∏—Å–æ–∫ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π:\n\n' + answer)


# –í–∑—è—Ç—å —Å—Ç–∞–Ω—Ü–∏—é
@bot.message_handler(commands=['take'])
def handler_take(message):
    user = db['users'].find_one({'id': message.chat.id})
    if not user:
        bot.send_message(message.chat.id, '–°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è!')
    else:
        is_started = db['settings'].find_one({'name': 'quest'})['is_started']
        is_ended = db['settings'].find_one({'name': 'quest'})['is_ended']
        if not is_started:
            text = '–ö–≤–µ—Å—Ç –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª—Å—è, –ø–æ—Ç–µ—Ä–ø–∏ –µ—â—ë –Ω–µ–º–Ω–æ–∂–∫–æ üòâ' if not is_ended else '–ö–≤–µ—Å—Ç —É–∂–µ –∑–∞–∫–æ–Ω—á–µ–Ω, –º–æ–∂–µ—à—å –æ—Ç–¥–æ—Ö–Ω—É—Ç—å üòâ'
            bot.send_message(message.chat.id, text)
        else:
            group = db['groups'].find_one({'id': user['group']})
            if group['current_station'] != 0:
                bot.send_message(message.chat.id, '–í—ã –µ—â—ë –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å—Ç–∞–Ω—Ü–∏–∏!')
            else:
                try:
                    station_number = int(message.text.split()[1])
                except:
                    bot.send_message(message.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!')
                else:
                    station = db['stations'].find_one({'id': station_number})
                    if not station:
                        bot.send_message(message.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç–∞–Ω—Ü–∏–∏!')
                    else:
                        group['current_station'] = station_number
                        db['groups'].replace_one({'id': group['id']}, group)

                        station['group'] = group['id']
                        db['stations'].replace_one({'id': station['id']}, station)

                        bot.send_message(message.chat.id, '–í–∞—à–∞ –≥—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ —Å—Ç–∞–Ω—Ü–∏—é \"' +
                                                          station['name'] +
                                                          '\"! –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –∂–¥—ë—Ç –≤–∞—Å –≤ ' + station['geo'])

                        org = db['users'].find_one({'station': station['id']})['id']
                        bot.send_message(org, '–ì—Ä—É–ø–ø–∞ ' + str(group['id']) + ' –±—ã–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ –≤–∞—à—É —Å—Ç–∞–Ω—Ü–∏—é!')


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
@bot.message_handler(commands=['reg_org'])
def handler_reg_org(message):
    is_open = db['settings'].find_one({'name': 'registration'})['open']
    if not is_open:
        bot.send_message(message.chat.id, '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤ –∑–∞–∫—Ä—ã—Ç–∞!')
    else:
        try:
            station = int(message.text.split()[1])
        except:
            bot.send_message(message.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!')
        else:
            x = db['stations'].find_one({'id': station})

            if not x:
                bot.send_message(message.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç–∞–Ω—Ü–∏–∏!')
            else:
                user = db['users'].find_one({'id': message.chat.id})
                if not user:
                    user = {'id': message.chat.id, 'type': 1, 'station': station}
                    db['users'].insert_one(user)

                    keyboards = keyboard([['/station']])
                    bot.send_message(message.chat.id, '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —Å—Ç–∞–Ω—Ü–∏–∏ \"' + x['name'] + '\" –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!',
                                     reply_markup=keyboards)
                else:
                    bot.send_message(message.chat.id, '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!')


# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞–Ω—Ü–∏–∏
@bot.message_handler(commands=['station'])
def handler_station(message):
    user = db['users'].find_one({'id': message.chat.id})
    if not user:
        bot.send_message(message.chat.id, '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!')
    else:
        if not user['type']:
            bot.send_message(message.chat.id, '–í—ã –Ω–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä!')
        else:
            station = db['stations'].find_one({'id': user['station']})
            group = db['groups'].find_one({'current_station': user['station']})
            current_group = str(group['id']) if group else '–ø—É—Å—Ç–æ'

            bot.send_message(message.chat.id, str(station["id"]) + '. ' + station['name'] +
                                              '\n–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: ' + station['geo'] +
                                              '\n–¢–µ–∫—É—â–∞—è –≥—Ä—É–ø–ø–∞: ' + current_group)


# –ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã
@bot.message_handler(commands=['reward'])
def handler_reward(message):
    user = db['users'].find_one({'id': message.chat.id})
    if not user:
        bot.send_message(message.chat.id, '–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!')
    else:
        if not user['type']:
            bot.send_message(message.chat.id, '–í—ã –Ω–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä!')
        else:
            station = db['stations'].find_one({'id': user['station']})
            group = db['groups'].find_one({'current_station': user['station']})
            if not group:
                bot.send_message(message.chat.id, '–ù–∞ –≤–∞—à–µ–π —Å—Ç–∞–Ω—Ü–∏–∏ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç!')
            else:
                try:
                    points = int(message.text.split()[1])
                except:
                    bot.send_message(message.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!')
                else:
                    reward = station['reward'] * points / 10 * (1 + group['money'] / 100)
                    group['experience'] += reward
                    group['current_station'] = 0
                    db['groups'].replace_one({'id': group['id']}, group)

                    station['group'] = 0
                    db['stations'].replace_one({'id': station['id']}, station)

                    bot.send_message(message.chat.id, '–ì—Ä—É–ø–ø–µ ' + str(group['id']) + ' —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω–Ω—ã –±–∞–ª–ª—ã!')

                    send_message_group(group['id'], '–°—Ç–∞–Ω—Ü–∏—è \"' + station['name'] + '\" —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω–∞! '
                                                    '\n–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –ø–æ—Å—Ç–∞–≤–∏–ª –≤–∞–º ' + str(points) + ' –±–∞–ª–ª–æ–≤.'
                                                    '\n–í–∞–º –±—ã–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–Ω–æ ' + str(reward) + ' –æ–ø—ã—Ç–∞.'
                                                    '\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–∞–Ω—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö.')


# –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –¥–µ–Ω–µ–≥
@bot.message_handler(commands=['pay'])
def handler_pay(message):
    user = db['users'].find_one({'id': message.chat.id})
    if user['type'] == 2:
        try:
            group_number = int(message.text.split()[1])
            amount = int(message.text.split()[2])
        except:
            bot.send_message(message.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!')
        else:
            group = db['groups'].find_one({'id': group_number})
            group['money'] += amount
            db['groups'].replace_one({'id': group_number}, group)

            bot.send_message(message.chat.id, '–î–µ–Ω—å–≥–∏ —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏–ª–µ–Ω—ã.')
            send_message_group(group_number, '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–µ–π –≥—Ä—É–ø–ø–µ –±—ã–ª–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ ' + str(amount) + ' –¥–µ–Ω–µ–≥!')


# –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
@bot.message_handler(commands=['mailing'])
def handler_mailing(message):
    user = db['users'].find_one({'id': message.chat.id})
    if user['type'] == 2:
        try:
            text = ' '.join(message.text.split()[1:])
        except:
            bot.send_message(message.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!')
        else:
            users = db['users'].find({})
            for u in users:
                bot.send_message(u['id'], text)


# –ù–∞—á–∞—Ç—å –∫–≤–µ—Å—Ç
@bot.message_handler(commands='/begin')
def handler_begin(message):
    user = db['users'].find_one({'id': message.chat.id})
    if user['type'] == 2:
        quest_settings = db['settings'].find_one({'name': 'quest'})
        quest_settings['is_started'] = True
        quest_settings['is_ended'] = False
        db['settings'].replace_one({'name': 'quest'}, quest_settings)

        bot.send_message(message.chat.id, '–ö–≤–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!')

        users = db['users'].find({})
        text = '–ö–≤–µ—Å—Ç —Ç–æ–ª—å–∫–æ —á—Ç–æ –Ω–∞—á–∞–ª—Å—è, –∞ –∑–Ω–∞—á–∏—Ç –≤—ã —É–∂–µ –º–æ–∂–µ—Ç–µ –≤—ã–±–∏—Ä–∞—Ç—å —Å—Ç–∞–Ω—Ü–∏–∏, –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –æ–ø—ã—Ç, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –¥–ª—è –ø–æ–±–µ–¥—ã!'
        for u in users:
            bot.send_message(u['id'], text)


# –ó–∞–∫–æ–Ω—á–∏—Ç—å –∫–≤–µ—Å—Ç
@bot.message_handler(commands='/end')
def handler_end(message):
    user = db['users'].find_one({'id': message.chat.id})
    if user['type'] == 2:
        quest_settings = db['settings'].find_one({'name': 'quest'})
        quest_settings['is_started'] = False
        quest_settings['is_ended'] = True
        db['settings'].replace_one({'name': 'quest'}, quest_settings)

        bot.send_message(message.chat.id, '–ö–≤–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–∫–æ–Ω—á–µ–Ω!')

        users = db['users'].find({})
        text = '–ù–∞—à –∫–≤–µ—Å—Ç –ø–æ–¥–æ—â—ë–ª –∫ –∫–æ–Ω—Ü—É, –∑–∞–∫–∞–Ω—á–∏–≤–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞–Ω—Ü–∏–∏ –∏ –∂–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ–±—ä—è–≤–ª–µ–Ω—ã –≤ –∫–ª—É–±–µ! –î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á!!!'
        for u in users:
            bot.send_message(u['id'], text)


if __name__ == '__main__':
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            print(e)
            time.sleep(5)
